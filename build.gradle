plugins {
	id 'org.springframework.boot' version "${springBootVersion}" apply false
	id 'com.diffplug.spotless' version '6.25.0'
	id 'java' // Add java plugin to root project
}

ext['jedis.version'] = "${jedisVersion}"

allprojects {
	version = project.version
	group = project.group
	description = project.description
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

// Apply the Spotless configuration
apply from: "spotless.gradle"

subprojects {
	apply from: "$rootDir/gradle/build-conventions.gradle"
}

tasks.register('aggregateTestReport', TestReport) {
	destinationDirectory = layout.buildDirectory.dir("reports/tests/aggregate")
	testResults.setFrom(
			subprojects.collect {
				it.tasks.withType(Test)
			}
			)
}

// Add aggregated Javadoc generation
tasks.register('aggregateJavadoc', Javadoc) {
	description = 'Generate aggregated Javadoc for all modules'
	group = 'documentation'

	source subprojects.findAll {
		it.name in [
			'redis-om-spring',
			'redis-om-spring-ai'
		]
	}.collect { it.sourceSets.main.allJava }
	classpath = files(subprojects.findAll {
		it.name in [
			'redis-om-spring',
			'redis-om-spring-ai'
		]
	}.collect { it.sourceSets.main.compileClasspath })
	destinationDir = layout.buildDirectory.dir("docs/javadoc/aggregate").get().asFile

	options {
		title = "Redis OM Spring ${project.version} API"
		windowTitle = "Redis OM Spring ${project.version}"
		author = true
		version = true
		use = true
		splitIndex = true
		links(
				'https://docs.oracle.com/en/java/javase/21/docs/api/',
				'https://docs.spring.io/spring-framework/docs/current/javadoc-api/',
				'https://docs.spring.io/spring-data/redis/docs/current/api/',
				'https://docs.spring.io/spring-boot/api/java/'
				)
	}

	// Ensure Javadoc generation succeeds
	failOnError = false
}

// Individual module Javadocs
tasks.register('generateModuleJavadocs') {
	description = 'Generate Javadoc for individual modules'
	group = 'documentation'

	def moduleProjects = subprojects.findAll {
		it.name in [
			'redis-om-spring',
			'redis-om-spring-ai'
		]
	}
	dependsOn moduleProjects.collect { "${it.name}:javadoc" }

	doLast {
		moduleProjects.each { project ->
			copy {
				from project.tasks.javadoc.destinationDir
				into layout.buildDirectory.dir("docs/javadoc/modules/${project.name}").get().asFile
			}
		}
	}
}
