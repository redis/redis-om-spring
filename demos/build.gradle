plugins {
	id 'java'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

// Don't publish this module
bootJar { enabled = false }
jar { enabled = false }
tasks.matching { it.name.startsWith('publish') }.configureEach {
	enabled = false
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name = 'Spring Milestones'
		url = 'https://repo.spring.io/milestone'
	}
	maven {
		name = 'Spring Snapshots'
		url = 'https://repo.spring.io/snapshot'
	}
}

// Tell gradle to add the generated sources directory
sourceSets {
	main {
		java {
			srcDir file("${buildDir}/generated/sources/annotationProcessor/java/main")
		}
	}
	test {
		java {
			srcDir file("${buildDir}/generated/sources/annotationProcessor/java/test")
		}
	}
}

dependencies {
	implementation project(':redis-om-spring')

	// Important for RedisOM annotation processing!
	annotationProcessor project(':redis-om-spring')
	testAnnotationProcessor project(':redis-om-spring')

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Spring Boot starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-devtools'

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'org.mockito:mockito-core'
	testImplementation "com.redis:testcontainers-redis:${testcontainersRedisVersion}"
	testImplementation "org.testcontainers:junit-jupiter"

	// Optional dependencies used by some demos
	implementation 'com.github.javafaker:javafaker:1.0.2'
	implementation 'org.springframework:spring-context-support'
}

// Use -parameters flag for Spring
tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-parameters'
	options.fork = true
	options.forkOptions.jvmArgs << '-Xshare:off'
}

// Configure annotation processing
compileJava {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.generatedSourceOutputDirectory = file("${buildDir}/generated/sources/annotationProcessor/java/main")
}

compileTestJava {
	options.annotationProcessorPath = configurations.testAnnotationProcessor
	options.generatedSourceOutputDirectory = file("${buildDir}/generated/sources/annotationProcessor/java/test")
}

// Fix task dependencies for sourcesJar
sourcesJar {
	dependsOn compileJava
}

test {
	useJUnitPlatform()
	maxHeapSize = "1g"

	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat = 'full'
	}
}